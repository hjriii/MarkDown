const { getUserById } = require('./userService');
 const { mockDeep } = require('jest-mock-extended');
 const { PrismaClient } = require('@prisma/client');
 jest.mock('@prisma/client', () => ({ PrismaClient: jest.fn(), }));
 const prismaMock = mockDeep<PrismaClient>();
 beforeAll(() => { PrismaClient.mockImplementation(() => prismaMock);
 });
 describe('getUserById', () => { it('should return user data for a valid id', async () => { const userId = 1;
 const user = { id: userId, name: 'Alice' };
 prismaMock.user.findUnique.mockResolvedValue(user);
 const result = await getUserById(userId);
 expect(result).toEqual(user);
 expect(prismaMock.user.findUnique).toHaveBeenCalledWith({ where: { id: userId } });
 });
 it('should return null if user is not found', async () => { const userId = 999;
 prismaMock.user.findUnique.mockResolvedValue(null);
 const result = await getUserById(userId);
 expect(result).toBeNull();
 expect(prismaMock.user.findUnique).toHaveBeenCalledWith({ where: { id: userId } });
