const { createUserAndLog } = require('./transactionService');
 const { PrismaClient } = require('@prisma/client');
 jest.mock('@prisma/client', () => { const actualPrismaClient = jest.requireActual('@prisma/client');
 return { ...actualPrismaClient, PrismaClient: jest.fn().mockImplementation(() => ({ $transaction: jest.fn(), $executeRaw: jest.fn(), user: { create: jest.fn(), }, })), };
 });
 describe('createUserAndLog', () => { let prismaMock;
 beforeAll(() => { prismaMock = new PrismaClient();
 });
 it('should create user and log message within a transaction', async () => { const userData = { name: 'Jane Doe' };
 const logMessage = 'User created';
 const mockUser = { id: 1, ...userData };
 prismaMock.$transaction.mockImplementation(async (callback) => { return await callback(prismaMock);
 });
 prismaMock.user.create.mockResolvedValue(mockUser);
 prismaMock.$executeRaw.mockResolvedValue();
 const result = await createUserAndLog(userData, logMessage);
 expect(result).toEqual(mockUser);
 expect(prismaMock.user.create).toHaveBeenCalledWith({ data: userData });
 expect(prismaMock.$executeRaw).toHaveBeenCalledWith( 'INSERT INTO logs (message, userId) VALUES ($1, $2)', logMessage, mockUser.id );
